
build/kernel8.elf:     file format elf64-littleaarch64
build/kernel8.elf
architecture: aarch64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000000080000

Program Header:
    LOAD off    0x0000000000010000 vaddr 0x0000000000080000 paddr 0x0000000000080000 align 2**16
         filesz 0x0000000000000ff0 memsz 0x0000000000000ff0 flags r-x
    LOAD off    0x0000000000012000 vaddr 0x0000000000082000 paddr 0x0000000000082000 align 2**16
         filesz 0x0000000000000350 memsz 0x0000000000000350 flags rw-
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
private flags = 0x0:

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         00000dd4  0000000000080000  0000000000080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000218  0000000000080dd8  0000000000080dd8  00010dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000350  0000000000082000  0000000000082000  00012000  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      0000002b  0000000000000000  0000000000000000  00012350  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0000000000080000 l    d  .text	0000000000000000 .text
0000000000080dd8 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000082000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    df *ABS*	0000000000000000 start.o
0000000000080000 l       .text	0000000000000000 .section
000000000008001c l       .text	0000000000000000 move_bootloader_setting
0000000000080010 l       .text	0000000000000000 memzero
0000000000080070 l       .text	0000000000000000 set_stackpointer_and_jump
0000000000080030 l       .text	0000000000000000 move_bootloader
0000000000080044 l       .text	0000000000000000 clear_bootloader_setting
0000000000080060 l       .text	0000000000000000 clear_bootloader
0000000000000000 l    df *ABS*	0000000000000000 main.c
0000000000000000 l    df *ABS*	0000000000000000 mbox.c
0000000000000000 l    df *ABS*	0000000000000000 reboot.c
0000000000000000 l    df *ABS*	0000000000000000 uart.c
0000000000000000 l    df *ABS*	0000000000000000 utils.c
00000000000803b0 g     F .text	0000000000000034 cancel_reset
00000000000808ec g     F .text	00000000000000bc reverse
000000000008052c g     F .text	0000000000000040 uart_send
00000000000822c0 g     O .data	0000000000000090 mbox
0000000000080368 g     F .text	0000000000000048 reset
0000000000080dac g     F .text	0000000000000028 print_welcome
0000000000080d30 g     F .text	000000000000007c shell
000000000008072c g     F .text	0000000000000100 itoa
000000000008029c g     F .text	00000000000000a4 mbox_call
00000000000805bc g     F .text	000000000000005c uart_puts
0000000000083350 g       .data	0000000000000000 __stack_top
000000000008082c g     F .text	00000000000000c0 ftoa
00000000000803e4 g     F .text	0000000000000148 uart_init
0000000000080000 g       .text	0000000000000000 _start
0000000000082350 g       .data	0000000000000000 bss_end
0000000000080618 g     F .text	000000000000004c pow
000000000008056c g     F .text	0000000000000050 uart_getc
00000000000800c8 g     F .text	00000000000001d4 main
0000000000080664 g     F .text	0000000000000084 strcmp
00000000000809a8 g     F .text	0000000000000388 ls
00000000000822c0 g       .data	0000000000000000 bss_begin
00000000000806e8 g     F .text	0000000000000044 strlen
0000000000080340 g     F .text	0000000000000028 set


